#include <stdio.h>
#include <limits.h>
int path[100][100];
void find(int u,int v,int adj[][100])
{
    if(path[u][v]==0||adj[u][v]==-1)
    return;
    printf("Path from %d to %d: ",u,v);
    int t=u;
    printf("%d ",u);
    while(t!=v)
    {
        t=path[t][v];
        printf("-> %d",t);
    }
    printf(" : %d\n",adj[u][v]);
}
void print(int adj[][100],int v)
{
    for(int i=1;i<=v;i++)
    {
        if(i==1)
        {
            printf("   ");
            for(int i=1;i<=v;i++)
            printf("%d ",i);
            printf("\n");
        }
        printf("%d  ",i);
        for(int j=1;j<=v;j++)
        {
            if(adj[i][j]==INT_MAX)
            printf("-1 ");
            else
            printf("%d ",adj[i][j]);
        }
        printf("\n");
    }
}
void floyd(int adj[][100],int v)
{
    for(int i=1;i<=v;i++)
    for(int j=1;j<=v;j++)
    {
        if(adj[i][j]==-1)
        adj[i][j]=INT_MAX;
        else if(i!=j)
        path[i][j]=j;
    }

    for(int k=1;k<=v;k++)
    {
        for(int i=1;i<=v;i++)
        for(int j=1;j<=v;j++)
        {
            if(adj[i][k]==INT_MAX||adj[k][j]==INT_MAX)
            continue;
            if(adj[i][j]>adj[i][k]+adj[k][j])
            {
                adj[i][j]=adj[i][k]+adj[k][j];
                path[i][j]=path[i][k];
            }
        }
        if(k==v)
        printf("Optimal Solution : \n");
        else
        printf("Intermediate step %d : \n",k);
        print(adj,v);
    }
}
int main()
{
    int v,edges;
    printf("Enter no of vertices : ");
    scanf("%d",&v);
    int adj[100][100];
    for(int i=1;i<=v;i++)
    for(int j=1;j<=v;j++)
    {
        adj[i][j]=-1;
        path[i][j]=0;
    }

    printf("Enter no of edges : ");
    scanf("%d",&edges);

    printf("Enter edges : (src,dest,weight)");
    for(int i=0;i<edges;i++)
    {
        int src,dest,wt;
        scanf("%d%d%d",&src,&dest,&wt);
        adj[src][dest]=wt;
        path[src][dest]=dest;
    }
    for(int i=1;i<=v;i++)
    adj[i][i]=0;

    floyd(adj,v);
    printf("\nPATH : \n");
    for(int i=1;i<=v;i++)
    {
        for(int j=1;j<=v;j++)
        {
            find(i,j,adj);
        }
    }
    return 0;
}


aditya code
#include <stdio.h>
#include <limits.h>

#define MAX 10
#define INF 99999

int dist[MAX][MAX], next[MAX][MAX];
int V;

void printMatrix(int k) {
    printf("\nA%d\n", k); 

    printf("\t");
    for (int j = 0; j < V; j++)
        printf("%d\t", j + 1);
    printf("\n");

    for (int i = 0; i < V; i++) {
        printf("%d\t", i + 1); 
        for (int j = 0; j < V; j++) {
            if (dist[i][j] == INF)
                printf("INF\t");
            else
                printf("%d\t", dist[i][j]);
        }
        printf("\n");
    }
}

void printPath(int u, int v) {
    if (next[u][v] == -1) {
        printf("No path\n");
        return;
    }

    printf("%d", u + 1);
    while (u != v) {
        u = next[u][v];
        printf(" -> %d", u + 1);
    }
}

void floydWarshall() {
    for (int k = 0; k < V; k++) {
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (dist[i][k] != INF && dist[k][j] != INF &&
                    dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                    next[i][j] = next[i][k];
                }
            }
        }
        printMatrix(k + 1); 
    }
}

int main() {
    int E;
    printf("Enter number of vertices: ");
    scanf("%d", &V);
    printf("Enter number of edges: ");
    scanf("%d", &E);

    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i == j)
                dist[i][j] = 0;
            else
                dist[i][j] = INF;
            next[i][j] = -1;
        }
    }

    printf("Enter edges as: source destination weight\n");
    for (int i = 0; i < E; i++) {
        int u, v, w;
        scanf("%d %d %d", &u, &v, &w);
        u--; v--;
        dist[u][v] = w;
        next[u][v] = v;
    }

    printMatrix(0);
    floydWarshall();

    printf("\nPaths:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            if (i != j && dist[i][j] != INF) {
                printPath(i, j);
                printf(": %d\n", dist[i][j]);
            }
        }
    }

    return 0;
}
